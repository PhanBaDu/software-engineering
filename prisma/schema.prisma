generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password String?
  fullName     String
  phoneNumber  String?
  gender       Gender?
  avatarUrl    String?
  role         Role      @default(USER)
  createdAt    DateTime  @default(now())

  shop         Shop?     // Mỗi user chỉ có 1 shop
  orders       Order[]
  reviews      Review[]
  cartItems    CartItem[]
  favorites    Favorite[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  USER
  ADMIN
}

model Shop {
  id               Int        @id @default(autoincrement())
  userId           Int        @unique
  shopName         String
  email            String
  phoneNumber      String
  idNumber         String
  idImageUrl       String
  userIdImageUrl   String
  createdAt        DateTime   @default(now())
  status           ShopStatus @default(PENDING)

  user             User       @relation(fields: [userId], references: [id])
  products         Product[]
}

enum ShopStatus {
  PENDING
  APPROVED
  REJECTED
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String
  slug  String  @unique

  products Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  shopId      Int
  name        String
  description String
  price       Decimal    @db.Decimal(10, 2)
  stock       Int
  thumbnail   String
  status      ProductStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  categoryId  Int

  shop        Shop       @relation(fields: [shopId], references: [id])
  category    Category   @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  orderItems  OrderItem[]
  favorites   Favorite[]
  reviews     Review[]
  cartItems   CartItem[]
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

model ProductImage {
  id        Int    @id @default(autoincrement())
  productId Int
  imageUrl  String

  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id         Int        @id @default(autoincrement())
  userId     Int
  status     OrderStatus @default(PENDING)
  totalPrice Decimal     @db.Decimal(10, 2)
  createdAt  DateTime    @default(now())

  user       User       @relation(fields: [userId], references: [id])
  items      OrderItem[]
}

enum OrderStatus {
  PENDING
  SHIPPING
  COMPLETED
  CANCELLED
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model CartItem {
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model Favorite {
  userId    Int
  productId Int

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}